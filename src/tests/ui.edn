; SPDX-License-Identifier: BSD-3-Clause
; Copyright Â© 2022 Fragcolor Pte. Ltd.

;; Notes:
;;   This file contains unit tests for the UI shards.
;;   It is not meant to be realistic. For such samples, look at egui-demo.edn.

(defmesh main)
(def timestep (/ 1.0 60.0))
(def duration 60)
(def input "**input**")

;; context
(defloop context-test
  (GFX.MainWindow
   :Contents
   (->
    (Setup
     (GFX.DrawQueue) >= .ui-draw-queue
     (GFX.UIPass .ui-draw-queue) >> .render-steps)
    .ui-draw-queue (GFX.ClearQueue)

    input
    (UI .ui-draw-queue)
    ;; input passthrough
    (Assert.Is input :Abort true)

    (GFX.Render :Steps .render-steps))))
(schedule main context-test)
(run main timestep duration)

;; window
(defloop window-test
  (GFX.MainWindow
   :Contents
   (->
    (Setup
     (GFX.DrawQueue) >= .ui-draw-queue
     (GFX.UIPass .ui-draw-queue) >> .render-steps)
    .ui-draw-queue (GFX.ClearQueue)

    (UI
     .ui-draw-queue
     (->
      input
      (UI.Window
       :Contents
       (->
        ;; input pass into
        (Assert.Is input :Abort true)))
      ;; input passthrough
      (Assert.Is input :Abort true)))

    (GFX.Render :Steps .render-steps))))
(schedule main window-test)
(run main timestep duration)

;; scope
(defloop scope-test
  (GFX.MainWindow
   :Contents
   (->
    (Setup
     (GFX.DrawQueue) >= .ui-draw-queue
     (GFX.UIPass .ui-draw-queue) >> .render-steps)
    .ui-draw-queue (GFX.ClearQueue)

    (UI
     .ui-draw-queue
     (->
      (UI.Window
       :Contents
       (->
        input
        (UI.Scope
         :Contents
         (->
          ;; input pass into
          (Assert.Is input :Abort true)))
        ;; input passthrough
        (Assert.Is input :Abort true)))))

    (GFX.Render :Steps .render-steps))))
(schedule main scope-test)
(run main timestep duration)

;; area
(defloop area-test
  (GFX.MainWindow
   :Contents
   (->
    (Setup
     (GFX.DrawQueue) >= .ui-draw-queue
     (GFX.UIPass .ui-draw-queue) >> .render-steps)
    .ui-draw-queue (GFX.ClearQueue)

    (UI
     .ui-draw-queue
     (->
      input
      (UI.Area
       :Anchor Anchor.TopLeft
       :Contents
       (->
        ;; input pass into
        (Assert.Is input :Abort true)
        "TopLeft" (UI.Label)))
      (UI.Area
       :Anchor Anchor.Top
       :Contents
       (->
        ;; input pass into
        (Assert.Is input :Abort true)
        "Top" (UI.Label)))
      (UI.Area
       :Anchor Anchor.TopRight
       :Contents
       (->
        ;; input pass into
        (Assert.Is input :Abort true)
        "TopRight" (UI.Label :Wrap false)))
      (UI.Area
       :Anchor Anchor.Left
       :Contents
       (->
        ;; input pass into
        (Assert.Is input :Abort true)
        "Left" (UI.Label)))
      (UI.Area
       :Anchor Anchor.Center
       :Contents
       (->
        ;; input pass into
        (Assert.Is input :Abort true)
        "Center" (UI.Label)))
      (UI.Area
       :Anchor Anchor.Right
       :Contents
       (->
        ;; input pass into
        (Assert.Is input :Abort true)
        "Right" (UI.Label)))
      (UI.Area
       :Anchor Anchor.BottomLeft
       :Contents
       (->
        ;; input pass into
        (Assert.Is input :Abort true)
        "BottomLeft" (UI.Label)))
      (UI.Area
       :Anchor Anchor.Bottom
       :Contents
       (->
        ;; input pass into
        (Assert.Is input :Abort true)
        "Bottom" (UI.Label)))
      (UI.Area
       :Anchor Anchor.BottomRight
       :Contents
       (->
        ;; input pass into
        (Assert.Is input :Abort true)
        "BottomRight" (UI.Label :Wrap false)))
        ;; input passthrough
      (Assert.Is input :Abort true)))

    (GFX.Render :Steps .render-steps))))
(schedule main area-test)
(run main timestep duration)

;; panels
(defloop panels-test
  (GFX.MainWindow
   :Contents
   (->
    (Setup
     (GFX.DrawQueue) >= .ui-draw-queue
     (GFX.UIPass .ui-draw-queue) >> .render-steps)
    .ui-draw-queue (GFX.ClearQueue)

    (UI
     .ui-draw-queue
     (->
      input
      (UI.TopPanel
       (->
        ;; input pass into
        (Assert.Is input :Abort true)))
      (UI.LeftPanel
       (->
        ;; input pass into
        (Assert.Is input :Abort true)))
      (UI.RightPanel
       (->
        ;; input pass into
        (Assert.Is input :Abort true)))
      (UI.BottomPanel
       (->
        ;; input pass into
        (Assert.Is input :Abort true)))
      (UI.CentralPanel
       (->
        ;; input pass into
        (Assert.Is input :Abort true)))
        ;; input passthrough
      (Assert.Is input :Abort true)))

    (GFX.Render :Steps .render-steps))))
(schedule main panels-test)
(run main timestep duration)

;; collapsing header
(defloop collapsing-header-test
  (GFX.MainWindow
   :Contents
   (->
    (Setup
     (GFX.DrawQueue) >= .ui-draw-queue
     (GFX.UIPass .ui-draw-queue) >> .render-steps)
    .ui-draw-queue (GFX.ClearQueue)

    (UI
     .ui-draw-queue
     (->
      (UI.CentralPanel
       :Contents
       (->
        input
        (UI.Collapsing
         :Heading (UI.Button "Heading")
         :DefaultOpen true
         :Contents
         (->
          ;; input pass into
          (Assert.Is input :Abort true)))
        ;; input passthrough
        (Assert.Is input :Abort true)))))

    (GFX.Render :Steps .render-steps))))
(schedule main collapsing-header-test)
(run main timestep duration)

;; columns
(defloop columns-header-test
  (GFX.MainWindow
   :Contents
   (->
    (Setup
     (GFX.DrawQueue) >= .ui-draw-queue
     (GFX.UIPass .ui-draw-queue) >> .render-steps)
    .ui-draw-queue (GFX.ClearQueue)

    (UI
     .ui-draw-queue
     (->
      (UI.CentralPanel
       :Contents
       (->
        input
        (UI.Columns
         [(->
           ;; input pass into
           (Assert.Is input :Abort true))
          (->
           ;; input pass into
           (Assert.Is input :Abort true))])
        ;; input passthrough
        (Assert.Is input :Abort true)))))

    (GFX.Render :Steps .render-steps))))
(schedule main columns-header-test)
(run main timestep duration)

;; disable
(defloop disable-test
  (GFX.MainWindow
   :Contents
   (->
    (Setup
     (GFX.DrawQueue) >= .ui-draw-queue
     (GFX.UIPass .ui-draw-queue) >> .render-steps)
    .ui-draw-queue (GFX.ClearQueue)

    (UI
     .ui-draw-queue
     (->
      (UI.CentralPanel
       :Contents
       (->
        input
        (UI.Disable
         :Disable true
         :Contents
         (->
          ;; input pass into
          (Assert.Is input :Abort true)))
        ;; input passthrough
        (Assert.Is input :Abort true)))))

    (GFX.Render :Steps .render-steps))))
(schedule main disable-test)
(run main timestep duration)

;; frame
(defloop frame-test
  (GFX.MainWindow
   :Contents
   (->
    (Setup
     (GFX.DrawQueue) >= .ui-draw-queue
     (GFX.UIPass .ui-draw-queue) >> .render-steps)
    .ui-draw-queue (GFX.ClearQueue)

    (UI
     .ui-draw-queue
     (->
      (UI.CentralPanel
       :Contents
       (->
        input
        (UI.Frame
         :InnerMargin (float4 10) :OuterMargin (float4 0) :Rounding (float4 5)
         :FillColor (color 32 32 128)
         :StrokeColor (color 255 64 255) :StrokeWidth 8.0
         :Contents
         (->
          ;; input pass into
          (Assert.Is input :Abort true)))
        ;; input passthrough
        (Assert.Is input :Abort true)))))

    (GFX.Render :Steps .render-steps))))
(schedule main frame-test)
(run main timestep duration)

;; group
(defloop group-test
  (GFX.MainWindow
   :Contents
   (->
    (Setup
     (GFX.DrawQueue) >= .ui-draw-queue
     (GFX.UIPass .ui-draw-queue) >> .render-steps)
    .ui-draw-queue (GFX.ClearQueue)

    (UI
     .ui-draw-queue
     (->
      (UI.CentralPanel
       :Contents
       (->
        input
        (UI.Group
         :Contents
         (->
          ;; input pass into
          (Assert.Is input :Abort true)))
        ;; input passthrough
        (Assert.Is input :Abort true)))))

    (GFX.Render :Steps .render-steps))))
(schedule main group-test)
(run main timestep duration)

;; indent
(defloop indent-test
  (GFX.MainWindow
   :Contents
   (->
    (Setup
     (GFX.DrawQueue) >= .ui-draw-queue
     (GFX.UIPass .ui-draw-queue) >> .render-steps)
    .ui-draw-queue (GFX.ClearQueue)

    (UI
     .ui-draw-queue
     (->
      (UI.CentralPanel
       :Contents
       (->
        input
        (UI.Indent
         :Contents
         (->
          ;; input pass into
          (Assert.Is input :Abort true)))
        ;; input passthrough
        (Assert.Is input :Abort true)))))

    (GFX.Render :Steps .render-steps))))
(schedule main indent-test)
(run main timestep duration)

;; horizontal layout
(defloop horizontal-test
  (GFX.MainWindow
   :Contents
   (->
    (Setup
     (GFX.DrawQueue) >= .ui-draw-queue
     (GFX.UIPass .ui-draw-queue) >> .render-steps)
    .ui-draw-queue (GFX.ClearQueue)

    (UI
     .ui-draw-queue
     (->
      (UI.CentralPanel
       :Contents
       (->
        input
        (UI.Horizontal
         :Contents
         (->
          ;; input pass into
          (Assert.Is input :Abort true)))
        ;; input passthrough
        (Assert.Is input :Abort true)))))

    (GFX.Render :Steps .render-steps))))
(schedule main horizontal-test)
(run main timestep duration)

;; scroll area
(defloop scroll-area-test
  (GFX.MainWindow
   :Contents
   (->
    (Setup
     (GFX.DrawQueue) >= .ui-draw-queue
     (GFX.UIPass .ui-draw-queue) >> .render-steps)
    .ui-draw-queue (GFX.ClearQueue)

    (UI
     .ui-draw-queue
     (->
      (UI.CentralPanel
       :Contents
       (->
        input
        (UI.ScrollArea
         :Horizontal true :Vertical true
         :AlwaysShow true
         :Contents
         (->
          ;; input pass into
          (Assert.Is input :Abort true)))
        ;; input passthrough
        (Assert.Is input :Abort true)))))

    (GFX.Render :Steps .render-steps))))
(schedule main scroll-area-test)
(run main timestep duration)

;; vertical layout
(defloop vertical-test
  (GFX.MainWindow
   :Contents
   (->
    (Setup
     (GFX.DrawQueue) >= .ui-draw-queue
     (GFX.UIPass .ui-draw-queue) >> .render-steps)
    .ui-draw-queue (GFX.ClearQueue)

    (UI
     .ui-draw-queue
     (->
      (UI.CentralPanel
       :Contents
       (->
        input
        (UI.Vertical
         :Contents
         (->
          ;; input pass into
          (Assert.Is input :Abort true)))
        ;; input passthrough
        (Assert.Is input :Abort true)))))

    (GFX.Render :Steps .render-steps))))
(schedule main vertical-test)
(run main timestep duration)

;; separator
(defloop separator-test
  (GFX.MainWindow
   :Contents
   (->
    (Setup
     (GFX.DrawQueue) >= .ui-draw-queue
     (GFX.UIPass .ui-draw-queue) >> .render-steps)
    .ui-draw-queue (GFX.ClearQueue)

    (UI
     .ui-draw-queue
     (->
      (UI.CentralPanel
       :Contents
       (->
        input
        (UI.Separator)
        ;; input passthrough
        (Assert.Is input :Abort true)))))

    (GFX.Render :Steps .render-steps))))
(schedule main separator-test)
(run main timestep duration)

;; menu bar
(defloop menubar-test
  (GFX.MainWindow
   :Contents
   (->
    (Setup
     (GFX.DrawQueue) >= .ui-draw-queue
     (GFX.UIPass .ui-draw-queue) >> .render-steps)
    .ui-draw-queue (GFX.ClearQueue)

    (UI
     .ui-draw-queue
     (->
      (UI.TopPanel
       :Contents
       (->
        (UI.MenuBar) (ExpectBool)))))

    (GFX.Render :Steps .render-steps))))
(schedule main menubar-test)
(run main timestep duration)

;; menu
(defloop menu-test
  (GFX.MainWindow
   :Contents
   (->
    (Setup
     (GFX.DrawQueue) >= .ui-draw-queue
     (GFX.UIPass .ui-draw-queue) >> .render-steps)
    .ui-draw-queue (GFX.ClearQueue)

    (UI
     .ui-draw-queue
     (->
      (UI.TopPanel
       :Contents
       (UI.MenuBar
        (->
         (UI.Menu :Title "Menu" :Contents (-> nil)) (ExpectBool))))))

    (GFX.Render :Steps .render-steps))))
(schedule main menu-test)
(run main timestep duration)

;; button
(defloop button-test
  (GFX.MainWindow
   :Contents
   (->
    (Setup
     (GFX.DrawQueue) >= .ui-draw-queue
     (GFX.UIPass .ui-draw-queue) >> .render-steps)
    .ui-draw-queue (GFX.ClearQueue)

    (UI
     .ui-draw-queue
     (->
      input
      (UI.CentralPanel
       :Contents
       (->
        (UI.Button
         "Click me!"
         (->
          (Assert.Is input :Abort true)
          (Msg "Clicked")))
        (ExpectBool)))))

    (GFX.Render :Steps .render-steps))))
(schedule main button-test)
(run main timestep duration)

;; checkbox
(defloop checkbox-test
  (GFX.MainWindow
   :Contents
   (->
    (Setup
     (GFX.DrawQueue) >= .ui-draw-queue
     (GFX.UIPass .ui-draw-queue) >> .render-steps)
    .ui-draw-queue (GFX.ClearQueue)

    (UI
     .ui-draw-queue
     (->
      (UI.CentralPanel
       :Contents
       (->
        (UI.Checkbox "Checked" .checked)
        (ExpectBool)
        .checked (ExpectBool)))))

    (GFX.Render :Steps .render-steps))))
(schedule main checkbox-test)
(run main timestep duration)

;; color-input
(defloop color-input-test
  (GFX.MainWindow
   :Contents
   (->
    (Setup
     (GFX.DrawQueue) >= .ui-draw-queue
     (GFX.UIPass .ui-draw-queue) >> .render-steps)
    .ui-draw-queue (GFX.ClearQueue)

    (UI
     .ui-draw-queue
     (->
      (UI.CentralPanel
       :Contents
       (->
        (UI.ColorInput .color) (ExpectColor)
        .color (ExpectColor)))))

    (GFX.Render :Steps .render-steps))))
(schedule main color-input-test)
(run main timestep duration)

;; combo
(defloop combo-test
  (GFX.MainWindow
   :Contents
   (->
    (Setup
     (GFX.DrawQueue) >= .ui-draw-queue
     (GFX.UIPass .ui-draw-queue) >> .render-steps)
    .ui-draw-queue (GFX.ClearQueue)

    (UI
     .ui-draw-queue
     (->
      (UI.CentralPanel
       :Contents
       (->
        ["Hello" "World"] (UI.Combo "Word" .index) (ExpectString)
        .index (ExpectInt)))))

    (GFX.Render :Steps .render-steps))))
(schedule main combo-test)
(run main timestep duration)

;; hyperlink
(defloop hyperlink-test
  (GFX.MainWindow
   :Contents
   (->
    (Setup
     (GFX.DrawQueue) >= .ui-draw-queue
     (GFX.UIPass .ui-draw-queue) >> .render-steps)
    .ui-draw-queue (GFX.ClearQueue)

    (UI
     .ui-draw-queue
     (->
      (UI.CentralPanel
       :Contents
       (->
        "https://docs.fragcolor.xyz" (UI.Hyperlink "Fragcolor documentation")
        (Assert.Is "https://docs.fragcolor.xyz" :Abort true)))))

    (GFX.Render :Steps .render-steps))))
(schedule main hyperlink-test)
(run main timestep duration)

;; image
(defloop image-test
  (GFX.MainWindow
   :Width 640 :Height 640
   :Contents
   (->
    (Setup
     (GFX.DrawQueue) >= .ui-draw-queue
     (GFX.UIPass .ui-draw-queue) >> .render-steps)
    .ui-draw-queue (GFX.ClearQueue)

    (UI
     .ui-draw-queue
     (->
      (UI.CentralPanel
       :Contents
       (->
        (Setup
         (LoadImage "../../assets/ShardsLogo.png") = .image
         (float2 0.25 0.25) = .scale)
        .image (UI.Image .scale)))))

    (GFX.Render :Steps .render-steps))))
(schedule main image-test)
(run main timestep duration)

;; image button
(defloop image-button-test
  (GFX.MainWindow
   :Width 640 :Height 640
   :Contents
   (->
    (Setup
     (GFX.DrawQueue) >= .ui-draw-queue
     (GFX.UIPass .ui-draw-queue) >> .render-steps)
    .ui-draw-queue (GFX.ClearQueue)

    (UI
     .ui-draw-queue
     (->
      (UI.CentralPanel
       :Contents
       (->
        (Setup
         (LoadImage "../../assets/ShardsLogo.png") = .image
         (float2 0.1 0.1) = .scale)
        .image (UI.ImageButton :Scale .scale :Action (Msg "Clicked"))))))

    (GFX.Render :Steps .render-steps))))
(schedule main image-button-test)
(run main timestep duration)

;; label
(defloop label-test
  (GFX.MainWindow
   :Contents
   (->
    (Setup
     (GFX.DrawQueue) >= .ui-draw-queue
     (GFX.UIPass .ui-draw-queue) >> .render-steps)
    .ui-draw-queue (GFX.ClearQueue)

    (UI
     .ui-draw-queue
     (->
      (UI.CentralPanel
       :Contents
       (->
        "Hello Shards!" (UI.Label)
        (Assert.Is "Hello Shards!" :Abort true)))))

    (GFX.Render :Steps .render-steps))))
(schedule main label-test)
(run main timestep duration)

;; listbox
(defloop listbox-test
  (GFX.MainWindow
   :Contents
   (->
    (Setup
     (GFX.DrawQueue) >= .ui-draw-queue
     (GFX.UIPass .ui-draw-queue) >> .render-steps)
    .ui-draw-queue (GFX.ClearQueue)

    (UI
     .ui-draw-queue
     (->
      (UI.CentralPanel
       :Contents
       (->
        ["Hello" "World"] (UI.ListBox .index) (ExpectString)
        .index (ExpectInt)))))

    (GFX.Render :Steps .render-steps))))
(schedule main listbox-test)
(run main timestep duration)

;; numeric input
(defloop numeric-input-test
  (GFX.MainWindow
   :Contents
   (->
    (Setup
     (GFX.DrawQueue) >= .ui-draw-queue
     (GFX.UIPass .ui-draw-queue) >> .render-steps)
    .ui-draw-queue (GFX.ClearQueue)

    (UI
     .ui-draw-queue
     (->
      (UI.CentralPanel
       :Contents
       (->
        (UI.IntInput) (ExpectInt)
        (UI.Int2Input) (ExpectInt2)
        (UI.Int3Input) (ExpectInt3)
        (UI.Int4Input) (ExpectInt4)
        (UI.FloatInput) (ExpectFloat)
        (UI.Float2Input) (ExpectFloat2)
        (UI.Float3Input) (ExpectFloat3)
        (UI.Float4Input) (ExpectFloat4)))))

    (GFX.Render :Steps .render-steps))))
(schedule main numeric-input-test)
(run main timestep duration)

;; numeric slider
(defloop numeric-slider-test
  (GFX.MainWindow
   :Contents
   (->
    (Setup
     (GFX.DrawQueue) >= .ui-draw-queue
     (GFX.UIPass .ui-draw-queue) >> .render-steps)
    .ui-draw-queue (GFX.ClearQueue)

    (UI
     .ui-draw-queue
     (->
      (UI.CentralPanel
       :Contents
       (->
        (UI.IntSlider :Min 1 :Max 100) (ExpectInt)
        (UI.Int2Slider :Min (int2 1) :Max (int2 100)) (ExpectInt2)
        (UI.Int3Slider :Min (int3 1) :Max (int3 100)) (ExpectInt3)
        (UI.Int4Slider :Min (int4 1) :Max (int4 100)) (ExpectInt4)
        (UI.FloatSlider :Min 0.0 :Max 1.0) (ExpectFloat)
        (UI.Float2Slider :Min (float2 0) :Max (float2 1)) (ExpectFloat2)
        (UI.Float3Slider :Min (float3 0) :Max (float3 1)) (ExpectFloat3)
        (UI.Float4Slider :Min (float4 0) :Max (float4 1)) (ExpectFloat4)))))

    (GFX.Render :Steps .render-steps))))
(schedule main numeric-slider-test)
(run main timestep duration)

;; progress bar
(defloop progress-bar-test
  (GFX.MainWindow
   :Contents
   (->
    (Setup
     (GFX.DrawQueue) >= .ui-draw-queue
     (GFX.UIPass .ui-draw-queue) >> .render-steps)
    .ui-draw-queue (GFX.ClearQueue)

    (UI
     .ui-draw-queue
     (->
      (UI.CentralPanel
       :Contents
       (->
        (Setup 0.1 >= .progress)
        .progress
        (UI.ProgressBar)
        (ExpectFloat)
        (Math.Add 0.01) > .progress))))

    (GFX.Render :Steps .render-steps))))
(schedule main progress-bar-test)
(run main timestep duration)

;; radio button
(defloop radio-button-test
  (GFX.MainWindow
   :Contents
   (->
    (Setup
     (GFX.DrawQueue) >= .ui-draw-queue
     (GFX.UIPass .ui-draw-queue) >> .render-steps)
    .ui-draw-queue (GFX.ClearQueue)

    (UI
     .ui-draw-queue
     (->
      (UI.CentralPanel
       :Contents
       (->
        (UI.RadioButton "Choice 1" .choice 1) (ExpectBool)
        (UI.RadioButton "Choice 2" .choice 2) (ExpectBool)
        (UI.RadioButton "Choice 3" .choice 3) (ExpectBool)
        .choice (ExpectInt)))))

    (GFX.Render :Steps .render-steps))))
(schedule main radio-button-test)
(run main timestep duration)

;; spinner
(defloop spinner-test
  (GFX.MainWindow
   :Contents
   (->
    (Setup
     (GFX.DrawQueue) >= .ui-draw-queue
     (GFX.UIPass .ui-draw-queue) >> .render-steps)
    .ui-draw-queue (GFX.ClearQueue)

    (UI
     .ui-draw-queue
     (->
      (UI.CentralPanel
       :Contents
       (->
        input
        (UI.Spinner)
        ;; input passthrough
        (Assert.Is input :Abort true)))))

    (GFX.Render :Steps .render-steps))))
(schedule main spinner-test)
(run main timestep duration)

;; text input
(defloop text-input-test
  (GFX.MainWindow
   :Contents
   (->
    (Setup
     (GFX.DrawQueue) >= .ui-draw-queue
     (GFX.UIPass .ui-draw-queue) >> .render-steps)
    .ui-draw-queue (GFX.ClearQueue)

    (UI
     .ui-draw-queue
     (->
      (UI.CentralPanel
       :Contents
       (->
        (Setup "Lorem ipsum dolor sit amet" >= .text)
        (UI.TextInput "read-only") (ExpectNone)
        (UI.TextInput .text) (Maybe (ExpectNone) :Else (ExpectString))))))

    (GFX.Render :Steps .render-steps))))
(schedule main text-input-test)
(run main timestep duration)

;; tooltip
(defloop tooltip-test
  (GFX.MainWindow
   :Contents
   (->
    (Setup
     (GFX.DrawQueue) >= .ui-draw-queue
     (GFX.UIPass .ui-draw-queue) >> .render-steps)
    .ui-draw-queue (GFX.ClearQueue)

    input
    (UI
     .ui-draw-queue
     (UI.CentralPanel
      :Contents
      (->
       (UI.Tooltip
        :Contents
        (->
         ;; input pass into
         (Assert.Is input :Abort true)
         "Lorem ipsum" (UI.Label))
        :OnHover
        (->
         ;; input pass into
         (Assert.Is input :Abort true)
         "Tooltip" (UI.Label)))
       ;; input passthrough
       (Assert.Is input :Abort true))
      ))
    ;; input passthrough
    (Assert.Is input :Abort true)

    (GFX.Render :Steps .render-steps))))
(schedule main tooltip-test)
(run main timestep duration)
