(defshards spin-transform [t location]
  t
  (| (Math.Multiply 0.2) (Math.AxisAngleX) (Math.Rotation) >= .rotX)
  (| (Math.Multiply 0.7) (Math.AxisAngleY) (Math.Rotation) >= .rotY)
  (| (Math.Multiply 0.9) (Math.AxisAngleZ) (Math.Rotation) >= .rotZ)
  location (Math.Translation) (Math.MatMul .rotX) (Math.MatMul .rotY) (Math.MatMul .rotZ))

(def timestep (/ 1.0 120.0))

(GFX.MainWindow
:Contents
(->
(Setup
  ; Keep track of the time variable
  0.0 >= .time 
  
  ; Load the built-in cube mesh
  (GFX.BuiltinMesh :Type BuiltinMeshType.Cube) >= .mesh

  ; Declare transform variable
  (Float3 0 0 0) (Math.Translation) >= .transform

  ; The queue that will contain the draw commands (just the cube)
  ; By default this queue it automatically cleared after it has been processed
  (GFX.DrawQueue) >= .queue

  ; Define a pass that renders the cube, with the built-in color and camera transform behaviour
  (GFX.BuiltinFeature BuiltinFeatureId.Transform) >> .features
  (GFX.BuiltinFeature  BuiltinFeatureId.BaseColor) >> .features
  {:Features .features :Queue .queue} (GFX.DrawablePass) >> .render-steps

  ; Setup the camera
  {:Position (Float3 0 0 8) :Target (Float3 0 0 0)} (Math.LookAt) >= .view-transform
  (GFX.View :View .view-transform) >= .view)

; Rotate the cube's transform
.time (Math.Add timestep) > .time
(spin-transform .time (Float3 0.0 0 0))

; Update and retrieve the drawable
; Note that the transform is the input 
(GFX.Drawable :Mesh .mesh :Params {:baseColor (Float4 0 1 0 1)}) >= .drawable

; Add drawable to the queue
.drawable (GFX.Draw .queue)

; Render everyghing
(GFX.Render :View .view :Steps .render-steps)))
